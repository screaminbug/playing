import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Insets;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyEvent;
import java.awt.geom.Rectangle2D;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ExecutionException;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;


public class Main  {
	
	private static List<Boolean> data = new ArrayList<>(); 
	private static int height;
	private static int width = 12;
	private final JSpinner controlX = new JSpinner();
	private final JSpinner spinnerOffset = new JSpinner();
	private final JSpinner spinnerParts = new JSpinner();
    private final JSpinner  controlY = new JSpinner(); //new JSlider(JSlider.HORIZONTAL);
    private final DisplayPanel displayPanel = new DisplayPanel();;
    
    private final JTextArea positionsArea = new JTextArea();

	private boolean readyForBackground = true;
	
	private int parts = 14; 
	private int offset;
	

	public static void main(String[] args) {
		
//		if (args.length == 0) returnError();
//		
//		
//		int byteRead;
//		try {
//			FileInputStream fis = new FileInputStream(args[0]);
//			try {
//				byteRead = fis.read();
//				while (byteRead != -1) {
//					for (int bit = 7; bit >= 0; bit--) {
//						data.add((1 & (byteRead >> bit)) == 1);
//					}
//					byteRead = fis.read();
//					
//				}
//			} finally {
//				fis.close();
//			}	
//		} catch (FileNotFoundException e) {
//			// TODO Auto-generated catch block
//			System.out.println("No such file");
//			System.exit(-2);
//		} catch (IOException ioe) {
//			System.out.println("There was a problem with file IO.");
//			System.exit(-3);
//		}
		
		//String enigma = "69I960EHE0A4A0IVG0EHE02500R4R0G1T30PLJ00V6V0EHE0V1U01V10U5U0VGV0V4R";
		
		String enigma = "H3J9J4R9G7F9V4B7Z6D6Z3J6F3H6J9Z3T6T4K2C8W6W2Y4D9G3M3W7D6Z9M2X9C2W6Y4F2Y6X4R7T6W8Z3T2W7Q2H9P4T7T6R7M4B4P9X3C4J4J9P4Z2P2K3J4D6C3Q2X8M6W3M3Z6P4R8J7P6V3F7P8Z2X3Z6D6C4C3J8F4X6D2T8Z2G9B6W9M7P6Y3M2M7H4R9B3X6F2Q7H4C8F4P8X2M6Q7B9K4W6Z3V3V2C6H6Z8W9J8P7J7P2D6X7Q7Q3T4Y9C9Q3M4H8Z2K4Y6T9Z3F4W6T7V2T6R7X3Y2J7Y6R6D9K8M4Z2F6D4V6R8V9X9D2P4G8Z7C4T9Z2V7F3P6G2V8Y8C7Y9P7H7T2T7H7G9K4B4P2W7H9C2W3Z7V2T3R7J6D9H8V9T4P8T7V6Z6B8H7P2B2Q7B6Z6Q3P3C9R7T8H3Z2H8W9K2P3C2Q3Y7Q8X2J7V4F3P2M8T3M2B3T7Q2D2V6X9D7H3G4R7V2B6Q4Q8Z6M7R8B8B9Z7Z4Y4C2P7Z8Z6D8G6Z4J6Q7Q7D9D7P9T8X8H7H9J9W6X9H9T3R3B7T9K6P4Y6J3W7R8Y9M6P3H3M3K4C8R8G2Z6D2V2G9K9F2H9M8K8F6Z6D8J4F9T8V3P9K6B6T6H9V2T6G3M4Y8G8K9X3G3T2B3Q2M2G4B3F2C4B2K8R2B6H8W9W9Z9Q9P9J3D9M3H8V2F8D4K4B3G9X6Z8B4C9V3M2R9J4Y9B3H4X9W4G8M8X9J9G3D2M3J8P4D6F7K2Z4V3V2M2R4G6Z6M2K9V8W8T9G9Y8C3R7J9R4Y7R6D6J6R3H9F6D7F3Z4Z3F9F8Q2Y3V8Q6J3K6J7Y9J7G2K7R7B6C8Y3V2W7T7F8B2R4W2Y7G2D9K6P8P3Y2H8F3D9P4K7Z7W6K4J4G6X2Q2Q6H2H4R2X3Z7Z3F6C4F8V2Z2G6J7T3F2Q8D2Q9G8H9W7P3M2H7Y2D3X6H3K8F4W8Z3B3Y4Z2M7K4F6B3P3Q8K4H9B3V6D3X8M4T9C3T7R3X6H9T7D3Q6T4Q3G9H2Y9W6K9G6K8K8P4P7Z8J2W6D8X2D8H6K6T9Z9Z2M9M9C8K3T9T9F2Y3G3D6C9C4Y9F9G8K6R4K8D8Z4P9G8B4Y8B4K3X9Z8Y6G7Y9F3X8T3F4K7K8T6Y7T7G2W2G4B2F2W8R3R8B8J6P3M3J3H8T7X2V2V6V7G3T8B4R9T4D6J3D3H2Q3P7K2P3F6P3V3B4F6D8M8H2Z3M2F2M9Z9H8T7J7V6P9M3B3P9H3Q3M9R6M3W7X4Q9F3Z3J8C6K7R9Y2R3J9G9W7Z3V4P3J6C8T3W8K9G4M8Y4R2W9W2R2B3P9G8C7J2F2T2W4V2P2D3D8C9F6Q4G2F4G6F2P8B8X9B7X2G3P7J9D3T2P3P8C7R3F7Z9M3P6F4Y4W3K2H7F8R4D6F9T9Y3F4K4Z7T6C8R6H6C3T6D3J9W9H4M8B8Q3Q4Z8M4B9K2R2T6Y4G2F9R3W4H2M2W6Q9Q6R6B2C9F8M8T6F9C6W4T8G6K6G2X7B6R3T6M7Z4W9P8M7Y3K6G8T3D6W2G3X4R6K8Z2T8G6G6H8M4Q2H7K9M6B6P9G4P7J6T7V4B3D6W9C7D7Z4Y3B8C2M2W3Y3B3H9J8D6M3W4J4P6Z4M2G4K4K6P4B2G9X7J4V4X9K4H8K2V6Q6F4V8K8D7B6H3P6K2V9T6B2G7F4P9Q6M4C7V7D8G4W9R6T3T4Z6J6C2V3B9F2V2W4V2J2G8B9G3P2C9P9C3K3X6K9D6V9V4R6P3B4X8M6F9M3F4F9Y4P8Y9G7Y2V2K7V2B7Q6H9Y8V8D3Q4D7V3X8R4X4T9F3Y6B7V6R3F3J9G3C3Z7G7F9V4X9J7Y4K7Z9Z9D6K8C9D3G2F2M4C4B2H3W9K9Z8G8M3T3G6X2F4Y7R2W6H8H7Q3F4P7K7P7F6W8X4G6Q3H3R8T3W2G6F8G4Y6Q7P7K6Q4T7P9P2Q7T3P7Q9Y3D4Q9V2C2Y9X3G9C7G9G9D4W6D3G2H9G6H7J3J8Q7Z6C6K9C6W4V2B6Q3X2M2P2G9Z6R4P9C4X7T9X3K7Z7C3G8V7T9D4M3H3X2K3P6Q4R6Y4F9P8Z9B6P6Q3B3J9X4Y2Z7J8G3X4X2B6P2B4Y9R4T3M4M7M3T2Y6H9Z7Z3Y2P6X7R8H4Q8M6T8H7K6M7C2X3R9Z2T2B6C4Q8B6K3Q4W3B8Z7X4R7D6K6J4P7V6Z8D9X6C7M6Y2B4F3F2R2Y9R3J8V3F9T9Y7P8Z2J8P4V7M8D6F9R6J6F8Q6G3M4T7B6M2Z9R4Y8W3V9K9X4P8P8Q3V9W6T6Z9H6M6T7G3F8G4F7F2H6H8P6J8D4W7F9P2X2D9R2M8Q3Q4J7J9M2P7T3X8C4Q3Y8Z6H9D7J9F8T2H6P7D3G4T9T3C2W8F8T4Q3K2P8R8R4J4M6X8V4J2Q8P2H2T8X8P3P7X2Q4C7R9T2C6Z6K3H7F3V6Z4G8Y3W2D6Q7K8Y9H7F8F4J7G8G9Q8G2K7M8V7C3B8F2B3Q7X3J6W8J4J9Y6D8B2F6Q9K2T6X4P3C9M9G2J7H8K7M3C2W3B8Z9C4C7G2J7D3D6Z9W6V8B9Y4D6P4Y3X6X8R6R2W4M8W8Z9W3T8W6C7W8W2J7Y3X2D8R6P2F3M9Z6P7K2K2W8J4M8H4D4W8F4B7F2Q2T3X7F2M6H4H4Y9G2K8W4D9M2T9X8J9V8T2P7Z9R8W9F8P6G2V8Z4G7R3M6T8G3F2Z2C6B4W9F4C6B2X3J9C7H7H6Y7H2M8F6T9J8W4J4D3M4Q4B7W3R8X6M3M9D7G2V9R9K2V7R8P9K2Q4C7R3D9G6J4W3D7Q4P2W9C3B3K9R6T3C8Z9R8P3H4Y6J7Q6T8T7J4J6H9H4F3Q3Y8Q3Q8R8V7M8J3X7C6W3R8F2F7F2T3X7X3R6W9X7J4F2B4K6M2D4V7C2P8M9G9X6R9J3F8V6B9V3W7D4C7M3D8Y4Q3P6C7Z4Z3H2G4V4K9G4F4M7Y7J4R4J4F2V9B7V2H4H4M4P6J8G2T7M7P6G8Y4T6R4H7V8Y9H7M2Q4G3P6R9X3F8Z2T7W6V9X9R6K2V2P3D6M6P2R8D4Z7K3C9J4B8P7X6Z7V8F9Q8V8C6B2H9K9W7B6Z4V3J4T6H7Q3M6Z6Z7F8G9C2D3X7G6M7H3C7W8X2M9P2P6Y8K8R6J2Z4Z7Q9Q8J4B2Y7W4F4V7Q6G8Y9X2P3B7B8X6G2F9P8B8G8D7J9W8B7Z6H2V8X2J2V8T6H4G6G6P2V2K7C3T7T7H2C6Z4K2G9Y6W3B9Y9G9J4W8B8Q8V3X8P3D7K7X6Q8R2C7V3H9K3J7F9G2Z8T8T9T4V2W8Y3B6W7G6D7K9Y6F2V9K2D6G3H2J3P6M3X6Q4D9W3G6Z6Y4P9Z7W7G9C6D4C9X2K3M2R8Q6Q8Z7J6F2V2M6B9D6V2P2F8C9V2M3X6B4K4G2Q6F3Q2D3C4B9Z2K7Z9R9X8C6F6Z4Q6Z9Q4M8J6Z9D3T3K7C8B9R8M7P7H7F8M9R3T7K4D9Z8Q8Y8J4F6M9R3H2M8H3J4K6P2W6G8G2Z4V9Q4T7P8D7X6J7C7P8K8X8K3P9W4Z8D4K8D8Q4X2X4C7K4C6D7V4D6K6T6V7Z7J3D7K4V3K6G6H8R2B9D9R7Q8K6W7H9K9T6T8M3Y8R3R8V7J8R9R8R8C9V2P4T8K7G2R4F3P4B4K4T4Y2C7R7P6H8B4Z3Y7W8F2Y7M8W9F6G2V7K2G3Z9V8M4D3K8Z9B4D3V9D8D9C6C7X8P6D3K9C4W2G8D2R2V4G2X8Y7G7C2Y9W4J7W9C2X7Y3Y2J8G7Y4M9Y2M4R4W8K3K3B4J7Y7Q8X2M4K4P2C8F4Y7K2Z6Z7W7M8Q2R4C2R3J3J2P8H4P7J7H2M7D2X3F6W2V7J9B2F6H7Q4K7D7Q3P3R9F9Q4H4W2J4V2Y9K7Y9C4C8Z3P9H7V2B3V6Q8R3K2Z6R2J2Z6C8F7V4Z6Z9Y2Y6W6H3H8V3K9Z3T3X3T2Q6J9F7B3H6D9R6Z2R8T4C9R2T4G9X2H8P2B8F6M7D9B7C3T9X8R7Q6R9K9P7V7F3Y9W9Y2T2Y3Z8D4D6Z6X7W9K8M6F9G6B2T9D2J6M2J2Q7C8G6F9G4G3K2H4T7P6X8Y2V8F9Z9R9H3Z9F6Z8Z3J6D8D4T7M2P3C3X9M3R8K4T3Z7J7D2Q2V3T3M6G6F2D8V8P4Q2J8T7Z8V2X4Z9P4Q3K2J7K2B7D8J6K6Z2R9D6G2B4J6H8J6P7Y4V8H2P6X7G3T8G9M6Y7F4X9Z3W3R9Y8T3H9H3Q3X3T4C8K7Q2Q7Z6M2C9G8R2T7Y2D8F7F7B6Q2G6G4H9W9J3H9R2T4C9C7J7M6K2H9F2K6V3R8J2D9V7P3K4Q4J7M3D7M3X9G7J9M8P9X9H7C7G8B4V7P7P3Z8P7G7P2T2J7Z7F8T2Z6K6V9G7Z4J3P9C9H7T9B2W3M3M7T7V8Q8V4T7R6Z6P7Q2F7Q4F8G9Q9D6T9M8M2Z4G7D2C8F3K3V6Y2D4W6R2Z4B4W3M9M4Y8C6X2M9J7X6J3W6H8D3C6Z4W3Y7K4F3B7Y2J2Z3M8Q9Q7H7C6M4T3Z8F9X9P3K4G8W9G9G4F7P3W4V4H7D2X3R9J8X6R7P7B6D2W3H6K7V6W9J7R8H9G3P2G3Y8V8X3H6X8R9W2Y7H3W4K9Z3M6C8B2D3C8R8D8J8X4R3F3D9F7P9G2X9P9K3B8K4V8W2W4T9C9D4R6X4P8C8Q7F2R9Y4R9W3Q3V6Z2D7H4Y8R7C9M3Y4K7Y6Y3H9P4J8W6P9X7K4D9D4W8V8D3K8J2M2J4X2X2G7M4Y4M4J9F9T3M4H4T6G3M8M9K6Q8B9B2H3B9C9W9H2Y3D7T3G8T8P2X6Y6C6C7R7X6W6C4R8R8Z4W6X4V8P9R2X3R2P8P8X9Q8J4T8X3H4Y6F4T4Y6Y8Y4F2B2M3H3C6C8C2G8R6F3Q6D4Y8H4Q6D6H3C6T9P7R9K8D6F7Q4F2C8W6V3F4B4K3Z9F4Y6H8X8T4T6H2T3W4Z4D6Y3C4X6C2P6Z6Q2X6V7T4Y8Q3X6V2X7W2P7C3Q2T2V8G4C6K8F6Z9G4W8H6D2G7W4F6M3C8C8B3J3Q2P4K3V3Q4Q2F6Z3C2G2B4J8V4W3M4B9M4J4Y7F6R7Z6R8H6F6V8P7R2G6Z2F3P3J7C3G8K7J3X9K4M3R9B9Z2X3W4T8Y4Q8P3W2Z3B7X9W3Y2D8C7Y4G4C3V8B3X3P9Y6P6J2F9P9C8Z2R9K8W8M8P7M6C6P4Q4H8C4B2W9G7R7Z2C9P3T4X4T8D6R3X2B2P3W6T2G6V9J6D9R8C9R4G9Q8X2C8B6P9R7M8J9M2H7T6Q3Q6C4V4Q7V7P2R6M7P3D8P2P3T4G6W9G2G8X2C3Y2T9V6B8V9J8H2Z6V8W9G6C7Z4Y2D6V6P9J9F7B7G6F8Z9F7H8D4R6W2X8J8F2P8V4M3J7Z8Q3P2G6T9X2M7Q3J8Q9P9T3D8Y2W6Z8J8P2M6G7C2G3B7F9M3P2X2K2P2Q3R6C2K4D6B8Q6Z8R4H4R3V6K7K8X8Z9Y6M9K6B6R6H2Q8W9V2M6M8T8W7JOHNTITORXXXC2D7J2Y3H4C8X8R7D6M7B7T3Q6W6G4Z2Y2P4F4C9R7C3T3T8J7Q6Z9F3Z2J7K7T3H7Y8H3F7Z8C7V7C3P8T7H2K6M3P3T6V7X8J2X2B6Q6P3X9C7B7F7K6V8F3V7G7G9P4J2D2P8R3K3Q3Q6G3Z2D8Y6Y8W6K9H8M6M4Z2T3Z3K7F2Y2Z9H9V9F2G6C8B4Z2W4K8Z8B2Y6V3C4C8Z7P3V3H9Y9C2D2H7X3B9C6C6J7D3T9T7M9X9R9C3Q9G7G2W9Q6J6F3T2Z6T2G6B7F8G4C8D3D3C8H6D4Z8W7P3P6W4W9K2W3Q9D9Q4D2B9P4C7B3G3V7C9J4T7C8F8V7J8Z8K2M3H9H8V2B3P3Y6D9H9F9C8C7H2B8B4C6F7M4Q8H6K2W7M8W8Y9M9H2D6V8Q3C8W8P3H7P3D2B7R6G6B8K8R8R9H7H4H2H4B2D4T4G3J7H9K7J9T9T8K4V7K2Y2H7P4J9C3P2P9Y4R8Y9J8Y8B8V2F9T4Q8P6K4X3K3B8D8P2G9C6F4T4D6G2W3X7T6P8R4H2G4J8C6G8X2K4K3B8D6R7D2J4Y6J7F2G9Q6Z9C3V2Y4P2M6P9F9Z3J7B6J2R4Q2V7C6D6C4P6X3H9R8D2M8H4V3K8M7Z2Z3M3X4G3K2W7Z6T2M6J2K2G9W2M4C9M7X2C6T4Y2Q2D8X4F2R9H3H4R6Y2P8B9K4Z4J7H2C7Q6R3F7X3Y3T8V6R7W7F4G6M4M7H7Y3Y3X4X7Y2M2V7M9Q7D8J8W4G8T6P3B9Y9K9P2V7Q9Q9H6P6K9Z9M6Z6H9X9V4J4J7X7R9M4C6X3B6Q9Z7M4Q7P8Z6W8Q9K7F7W2K3Y3P2W6F6V4H6V3Z9B9P6B6W6M6T9P3T6M4R9D3V9Y6F2P7Z7K3Y3C3W6H4D7R2R9M3F9M6D2T2R8C3X9X8C2F4R9G4C6V4V2T2T8H3T2F2Z6P7P7R6W3W2V4D6M7G2J8M4T7Q4P2P4Y4D9G6G2P6Y8M6Q3M7Q9T7V9P3M4J8X4D6K4J8M4B2V3V3G6X6B4G4Y9X6J2H6K8X6J2Y9J9F9M3H3B7D4Q2K6B2C4W3P9M3H2F2D8X3H9W3M8V8T7D2D2D2R3B7F7W7K8G4K6R6H4W8G8R3W4G4G4M6Y2K8K6T6F9D2K7X2C6M4V4H2J2R4X3Y2C3G3Z3F7W6W2P8Y2B2W4D7M3C3P7Z2X6H9Z9P4X3K6F6M7Y3W6P7Z4F6V4J3R3R3F3D2C6C9J9G6J7K9R7V8B2D4Y3H6F2X9G4B8C8P6P2G2X8K7B4V3W8V9J9P3J6Q2D4G8Y3B9V7D7R6Y8T2Q3R6D8K4Q2B9X2F9D6G6M3R9C4P8Y8V6F6X3Y4X3Z7T8F3J4T7D4Z8V8T7C8B8J7P9B7K9C6Q2B3V6C3M3M8V8Y7G2M4Z2X6R3D8P8K2Q6J8X2F9V6X7Y7G3R9R6H3T9T4F3R6J8J2Y2D8P6D8M4C8W6D8Z3P9Y2B6X7H8F8M8W4F3W7M7M6Y4K7Z2Y2B9G7T8M7V4T3Z9Q4J7B9B2W7Y3F2H6P9J9M4M4Y9J2W2C7Q9W7W2X2Q8D9Y2Q3H3F6C7T6R7P3K4W9M9W6D2X8F7B7Y9J6G9K4J8J2M2T8K6W3P9C7Y8M8M2K7V2Z6G3P3G6B8X3Y9T2Q4M8R8Z4B4J7R7P3P2X9Y2C3P9M8W6C3C4K3C6C3B9T6Q3K8H7W7X9C3G8H9D9C4M8K2Z6R3R8D3J6Z2T7P9K6B8H9X7K9J4M7T4R9X2C8Z2G3Q6M3P9X4P7Q7X8H8H6F7G2B9T3W7G6R4V7V7X4Q9Q4T6T4K6X8V7R3C8W6T3Q3R3X7J9X7F3G7G2M9F8Y9T9G4R8M8X3B6J2F3V2M9V3P9H9V4G4J9T4T7W7J9K8G3F4W6B2Q7Z8Q2G3R8T3Y8C6P3T7C6P6J9H6Y3V8G6V4F4B7Q3Q8M3F2J2R7V4F6K4R9Z2G4V4R9R6Z4M6K2P3G3F2B3Z6D3G8R9K4D9Y9F8R3W3D8P6B3D8K9V4F8K2V4V6T2Y4R6D9C7C3G4Y8F8G2K8V7T3W7Y4P4B6D7F9D6Q2D8W3Y4Z6W4D4F7H4W2Y2P9Z4H2D8X2F2W6R7Q8R7F9F3Z8K6Z4H2M3G8T9H4V3C4Q4T4M7C7Y7R7J4Q2D8P4F4G2J3K9M4Z8G9Z7V4R3H9D3J6K6F7D8B7T6R7Q4P6F2C3C7X6P8Q7P9G9V9H7C3V7Z6C6Q9V6P8C2J9K4G3C8Z8Z6D9P3K9H7C7M9W6K2X4W4F6F3M3Y8D6F3R9K6G4G4G3P4B4M3Y3J4V6B9Z8Q7C6V2H9C7R2M8V2Z3J2B9Z9B8T4X7Y2H7B3W2W6V2C6K8V7J6B9T4T2Z4T7D8R6J8Q7T4C6Y8K6Q7J6X3J9F4Z8F6F9H6Y3F3W9Y8T8P9H2X3M9X8V8V3V3V2P8H7B8M2G2T9R7F4J3T2Y2D2D8Q2G6W7Y8Z3M9G2K6Z3D8V4K437_14N";
		for (int i= 0; i < enigma.length(); i++) {
			int character = (0b1111111 & enigma.charAt(i));
			int byteRead =  (character >= '0') && (character <= '9') ? character - '0' : character - 55;
			for (int bit = 0; bit < 8; bit++) {
				data.add((1 & (byteRead >> bit)) == 1);
			}
		}
		
		Main app = new Main();
		app.startApp();
				
	}
	
	public Main() {
		//constructBitmap();
	}
	
	private static void returnError() {
		System.out.println("Binary filename not specified. Exiting...");
		System.exit(-1);
	}
	
	private void constructUI() {
	    //Make sure we have nice window decorations.
        //JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame("Bitmap Viewer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 
        controlX.setValue(height);
        controlX.setEnabled(false);
        

        
        controlY.setValue(width);
        frame.setSize(height, width);
     
        frame.add(displayPanel, BorderLayout.CENTER);
        
        JPanel controlPanel = new JPanel();
        
        
        
//        controlY.setMinimum(2);
//        controlY.setMaximum(data.size()/10);
        
        controlY.addChangeListener(new UpdateListener());
        
        spinnerOffset.addChangeListener(new UpdateListener());
        
        spinnerParts.addChangeListener(new UpdateListener());
        
        displayPanel.addHierarchyBoundsListener(new HierarchyBoundsListener() {
			
			@Override
			public void ancestorResized(HierarchyEvent arg0) {
				parts = (int) spinnerParts.getValue();
				offset = (int) spinnerOffset.getValue();
				constructBitmap();
							
			}
			
			@Override
			public void ancestorMoved(HierarchyEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});
        
        
        
        FlowLayout controlLayout = new FlowLayout();
        controlLayout.setAlignment(FlowLayout.CENTER);
        
        controlPanel.setLayout(controlLayout);        		
        
        controlPanel.add(controlX);
        controlPanel.add(controlY);
        controlPanel.add(spinnerOffset);
        controlPanel.add(spinnerParts);
        
        
        JScrollPane scrollpane = new JScrollPane(positionsArea);
        frame.add(controlPanel, BorderLayout.NORTH);
        frame.add(scrollpane, BorderLayout.WEST);

        //Display the window.
        frame.pack();      
        frame.setVisible(true);
	}
	
	private void startApp() {
		
		constructBitmap();
		
		SwingUtilities.invokeLater(new Runnable() {
			
			@Override
			public void run() {
				constructUI();
								
			}
		});
	}
	
	private class UpdateListener implements ChangeListener {

		@Override
		public void stateChanged(ChangeEvent e) {
			parts = (int) spinnerParts.getValue();
			offset = (int) spinnerOffset.getValue();
			constructBitmap();
			
		}
		
	}
		
	private class BitmapConstructor extends SwingWorker<Queue<Rectangle2D.Double>, Object> {
		StringBuilder b = new StringBuilder();
		
		@Override
		protected Queue<Rectangle2D.Double> doInBackground() {
			if (parts == 0) return null;
			Queue<Rectangle2D.Double> rectQueue = new ArrayDeque<>();
			int size = data.size() / parts;

			height = (int) Math.floor(size / width);
			
			
			
			Dimension rectSize = displayPanel.getSize();
		    Insets rectInsets = displayPanel.getInsets();

		    double h =  (rectSize.height - rectInsets.top - rectInsets.bottom) / (double)height; 
		    double w =  (rectSize.width - rectInsets.left - rectInsets.right) / (double)width;			
			for (int part = 0; part < (parts * size); part += size) {
				for (int i = offset + part; i < size+part; i++) {
					double yPos = ((i-offset-part)  % height) * h; 
					double xPos = ((i-offset-part) / height) * w;
					
					if (data.get(i)) {
						rectQueue.add(new Rectangle2D.Double(xPos, yPos , w, h));
						b.append(String.format("%04d:  x = %04d  y = %04d\n", i, (int)xPos, (int)yPos));
					}		
				}
			}
			System.out.println("There are " + rectQueue.size() + " rects in queue!");
			return rectQueue;
		}
		
		@Override
		protected void done() {
			try {
				width = (int)controlY.getValue();
				controlX.setValue(new Integer(height));
				positionsArea.setText(b.toString());
				displayPanel.setRect(get());
				displayPanel.repaint();
				readyForBackground = true;
			} catch (InterruptedException | ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}

	private void constructBitmap() {
		if (readyForBackground) {
			BitmapConstructor bitmapConstructor = new BitmapConstructor();
			bitmapConstructor.execute();
			readyForBackground = false;
		}
		
	}
		

}
